# wsflight 開発計画 (v1.0)

YSFLIGHTのようなフライトシミュレーターをWebブラウザ上で再現するプロジェクトです。
このプロジェクトは、Three.jsを使用して3Dグラフィックスを描画し、
DenoとSocket.ioを使用してリアルタイム通信を実現します。
参考にするためのYSFLIGHTのソースコードはリポジトリルートの /YSFLIGHT/ に格納されています。

YSFLIGHTのソースコードから得た知見は常にリポジトリの /docs/ にドキュメントとして保存し、
プロジェクトの進捗状況や開発計画はこの .clinerules に記載します。

## コーディング規約

- TypeScriptを使用し、Three.jsとDenoの基本的な連携を優先する
- コードの品質を保つため、ESLintとPrettierを使用する
- インターフェースを活用し、疎結合な設計を心がける
- 物理計算などの重要な機能は必ずユニットテストを作成する

## プレスリリースドリブン開発アプローチ

プレスリリースドリブン開発は、製品の完成形を先に明確化してからバックワードに開発を進める手法です。
wsflight v1.0のREADMEに基づき、以下の開発計画を実施します。

## 機能実装チェックリスト

### 3Dレンダリングとグラフィックス (Three.js)
- [x] Three.jsの基本セットアップ
- [x] カメラとライティングの設定
- [x] 基本的な地形の実装
- [x] 1機の航空機モデルの設計と実装
- [ ] 飛行機のテクスチャと詳細設計
- [ ] 天候システム（晴れ/曇り）の実装

### 物理エンジンと飛行ダイナミクス
- [x] 飛行物理モデルの実装
- [x] 重力と空気抵抗のシミュレーション
- [x] エンジン出力と推力の計算
- [x] 舵の効きと航空力学の実装
- [x] 衝突判定システムの実装（地面のみ）

### ユーザーインターフェースと操作
- [x] キーボード入力ハンドリングの実装
- [x] 操縦系統（エルロン、エレベーター、ラダー、スロットル）の実装
- [x] HUD（ヘッドアップディスプレイ）の設計と実装
- [ ] メニュー画面と設定画面の実装
- [ ] チュートリアルの作成

### バックエンド (Deno)
- [x] Denoサーバーの初期設定
- [x] 静的ファイル配信の実装
- [ ] APIエンドポイントの設計
- [x] エラーハンドリングとロギング
- [ ] パフォーマンス最適化

### リアルタイム通信 (Socket.io)
- [ ] Socket.io接続の基本設定
- [ ] クライアント・サーバー間通信プロトコルの設計
- [ ] 状態同期メカニズムの実装
- [ ] 接続エラー処理とリカバリー
- [ ] レイテンシー最適化

## テスト計画
- [ ] 単体テストの作成（各コンポーネント）
- [ ] 統合テストの実施（システム全体）
- [ ] パフォーマンステスト（フレームレート、レスポンス）
- [ ] クロスブラウザテスト（Chrome, Firefox, Safari, Edge）
- [ ] ユーザビリティテスト

## ドキュメント作成
- [x] コード内コメントとドキュメンテーション
- [ ] APIドキュメント
- [ ] ユーザーマニュアル
- [ ] 開発者向けガイド

## デプロイと公開準備
- [x] ビルドプロセスの最適化
- [ ] アセット圧縮と最適化
- [ ] サーバーデプロイ手順書の作成
- [ ] リリースノートの作成
- [ ] GitHub Pagesへのデモデプロイ

## YSFLIGHT コードリファレンス

### ディレクトリ構造
- src/ - メインソースコード
  - dynamics/ - 飛行力学と物理計算
    - fsairproperty.cpp/.h - 大気特性（密度、音速など）
    - fsengine.cpp/.h - エンジンの基本クラス
    - fsrealprop.cpp/.h - プロペラエンジンの詳細実装
  - vehicle/ - 航空機の実装
    - fsairplaneproperty.cpp/.h - 航空機特性（空力、重量、エンジン等）
    - fsvehicleproperty.cpp/.h - 基本的な乗り物特性
  - autopilot/ - 自動操縦システム
    - fsautopilot.cpp/.h - 基本的な自動操縦
    - fsformationautopilot.cpp/.h - 編隊飛行
    - fsdogfightautopilot.cpp/.h - 空戦AI
  - graphics/ - グラフィックスとレンダリング
  - core/ - コアシステム
  - main/ - メインプログラム

### 確認済み機能と実装状況
1. 大気モデル (fsairproperty.cpp)
   - ✅ 高度に基づく大気密度計算 → `getAirDensity()` として実装済み
   - ✅ 高度に基づくマッハ1の速度計算 → `getMachOne()` として実装済み

2. エンジン特性 (fsrealprop.cpp)
   - ✅ エンジンブレーキトルク → Aircraft.ts の `updateEngineRPM()` に実装済み
   - ✅ スロットルとRPMの関連付け → Aircraft.ts に実装済み
   - ✅ プロペラの詳細モデル → Aircraft.ts に `calculateBladeForcesAndTorque()`, `controlPropellerPitch()` として実装済み

3. 航空力学 (Aircraft.ts)
   - ✅ 揚力・抗力計算モデル
   - ✅ 舵面効果（エルロン、エレベータ、ラダー）
   - ✅ 地面衝突と摩擦
   - ⚠️ 未対応: 高度な航空力学効果（失速時の挙動など）

4. 航空機特性 (fsairplaneproperty.h)
   - ✅ 基本的な状態管理（位置、姿勢、速度など）
   - ⚠️ 未対応: 詳細な航空機特性（離着陸装置、フラップ、スポイラーなど）
   - ⚠️ 未対応: 気象の影響（風、乱気流など）
   - ⚠️ 未対応: 自動操縦システム

### 今後の機能拡張計画
1. 航空機モデルの強化
   - 失速時の挙動改善（迎え角に応じた揚力の非線形挙動）
   - フラップ、スポイラー、可変翼などの制御面の追加
   - 風の影響のシミュレーション

2. 自動操縦システムの基本実装
   - 高度維持
   - 方向維持
   - 簡易な着陸アプローチ

3. 物理モデルの精緻化
   - より現実的な地形との相互作用
   - 衝突判定の精度向上

4. インターフェース改善
   - コックピット表示の充実
   - 計器類の実装（高度計、速度計、姿勢指示器など）

### 今後の調査が必要な領域
- 航空機の詳細な3Dモデル構造（src/vehicle/）
- 自動操縦システムの詳細実装方法（src/autopilot/）
- マルチプレイヤー同期の実装方法
- 地形やオブジェクトとの複雑な衝突判定
- プロペラの詳細なシミュレーション（個々のブレードの物理）

## 現状の文脈 (2025/03/09)

### 進捗・改善点
- JavaScriptからTypeScriptへの移行完了
  - src/physics/types.ts, public/scripts/main.ts, src/physics/Aircraft.tsのTypeScript化
  - 旧JSファイルは削除
  - ビルドプロセスで.tsファイルから.jsファイルを生成する設計

- 飛行物理モデルの強化
  - YSFLIGHTのソースコードを参考に大気モデルを実装
  - エンジンモデル（スロットル、RPM、推力の関係）を強化
  - 舵面効果（エルロン、エレベータ、ラダー）の実装
  - 地面との衝突判定と摩擦の実装

- プロペラエンジンモデルの実装
  - YSFLIGHTのfsrealprop.cppを参考に詳細なプロペラブレードモデルを実装
  - 個々のブレードの揚力・抗力を計算し、正確な推力とトルクを生成
  - 可変ピッチプロペラとガバナー機構（自動ピッチ調整）の実装
  - エネルギーベースのエンジン出力計算システム

- HUDの改善
  - 速度表示（km/h）
  - 高度表示（m）
  - エンジンRPM表示

- ビルドシステムの強化
  - scripts/build.ts を復元・改良
  - Three.jsを外部モジュールとして扱うように設定
  - ビルド成果物（*.js.map, *.js）を.gitignoreに追加

- ドキュメント作成
  - docs/flight_physics.mdに飛行物理モデルの解説を追加
  - docs/propeller_engine.mdにプロペラエンジンモデルの詳細ドキュメントを作成

### 操作方法
- カメラ: マウスドラッグでカメラ操作（Three.jsのOrbitControls）
- 航空機:
  - ↑/↓キー: エレベータ（ピッチ制御）
  - ←/→キー: エルロン（ロール制御）
  - A/Dキー: ラダー（ヨー制御）
  - Wキー: スロットル最大
  - Sキー: スロットル最小

### 開発環境
- ビルド: `deno task build`
- 開発サーバー起動: `deno task dev`
- サーバーURL: http://localhost:8000
