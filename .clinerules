# wsflight 開発計画 (v1.4)

YSFLIGHTを忠実にWebブラウザ上で再現するプロジェクトです。
本プロジェクトの目標は、YSFLIGHTの3Dモデル、物理挙動、航空機パラメータなどを
可能な限り正確に複製し、ブラウザ上で同一の体験を提供することです。
技術スタックとしては、Three.jsを使用して3Dグラフィックスを描画し、
DenoとSocket.ioを使用してリアルタイム通信を実現します。

参考にするためのYSFLIGHTのソースコードはリポジトリルートの /YSFLIGHT/ に格納されており、
このディレクトリに存在するあらゆるリソース（モデルファイル、テクスチャ、パラメータなど）を
徹底的に活用することを基本方針とします。

YSFLIGHTのソースコードから得た知見は常にリポジトリの /docs/ にドキュメントとして保存し、
プロジェクトの進捗状況や開発計画はこの .clinerules に記載します。

## 実装方針

- **忠実な再現**: YSFLIGHTの挙動、モデル、パラメータを可能な限り正確に再現する
- **リソースの直接活用**: YSFLIGHTのモデルファイル（.dnm, .srf）、テクスチャ、設定ファイルなどを直接読み込む
- **モダン技術の活用**: TypeScript, Three.js, Denoなどのモダンな技術スタックを使用
- **ブラウザ制約への対応**: WebブラウザとC++実装の違いによる制約は、同等の挙動を実現する代替手段で対応

## プロジェクト構造

```
/wsflight
├── docs/ - ドキュメント
│   ├── flight_physics.md - 飛行物理モデルの解説
│   ├── propeller_engine.md - プロペラエンジンモデルの詳細
│   ├── model_loaders.md - YSFLIGHTモデルローダーの解説
│   └── stall_behavior.md - 失速時の挙動改善の解説
├── public/ - フロントエンド
│   ├── index.html - メインHTML
│   ├── scripts/ - クライアントサイドスクリプト
│   │   ├── main.ts - エントリーポイント
│   │   ├── loaders/ - モデルローダー
│   │   │   ├── DNMLoader.ts - DNMファイルローダー
│   │   │   ├── SRFLoader.ts - SRFファイルローダー
│   │   │   └── index.ts - ローダーエクスポート
│   │   └── physics/ - 物理計算モジュール
│   └── styles/ - CSS
│       └── main.css - メインスタイル
├── scripts/ - ビルドスクリプト
│   ├── build.ts - ビルドプロセス
│   └── dev.ts - 開発サーバー
├── src/ - サーバーサイドソース
│   ├── main.ts - サーバーエントリーポイント
│   └── physics/ - 物理計算モジュール
│       ├── Aircraft.ts - 航空機クラス
│       └── types.ts - 型定義
├── YSFLIGHT/ - 参照用YSFLIGHTソースコード
├── .clinerules - プロジェクト計画と進捗
├── .gitignore
├── deno.json - Deno設定
├── tsconfig.json - TypeScript設定
└── README.md
```

## コーディング規約

- TypeScriptを使用し、厳格な型チェックを有効にする
- Three.jsとDenoの基本的な連携を優先する
- コードの品質を保つため、以下のツールを使用する：
  - ESLint: コード品質とスタイルの一貫性を確保
  - Prettier: コードフォーマットの自動化
- インターフェースを活用し、疎結合な設計を心がける
- 物理計算などの重要な機能は必ずユニットテストを作成する
- 意図ごとにコミットすること
- コミットメッセージは具体的かつ明確に記述する
- ドキュメントは日本語で作成し、コードコメントは英語で記述する

## 開発環境

- ビルド: `deno task build`
- 開発サーバー起動: `deno task dev`
- サーバーURL: http://localhost:8000
- 必要なツール:
  - Deno 1.x以上
  - モダンブラウザ（Chrome, Firefox, Safari, Edge）

## 機能実装チェックリスト

### 3Dレンダリングとグラフィックス (Three.js)
- [x] Three.jsの基本セットアップ
- [x] カメラとライティングの設定
- [x] 基本的な地形の実装
- [x] 1機の航空機モデルの設計と実装
- [x] F-18風の機体モデルの実装
- [x] YSFLIGHTのモデルファイル（.dnm, .srf）の読み込み機能の基本実装
- [ ] YSFLIGHTのモデルファイルの完全対応
- [ ] 飛行機のテクスチャと詳細設計
- [ ] 天候システム（晴れ/曇り）の実装

### 物理エンジンと飛行ダイナミクス
- [x] 飛行物理モデルの実装
- [x] 重力と空気抵抗のシミュレーション
- [x] エンジン出力と推力の計算
- [x] 舵の効きと航空力学の実装
- [x] 衝突判定システムの実装（地面のみ）
- [x] 揚力方向の計算改善
- [x] 失速時の挙動改善（迎え角に応じた揚力の非線形挙動）
- [ ] 風の影響のシミュレーション

### ユーザーインターフェースと操作
- [x] キーボード入力ハンドリングの実装
- [x] 操縦系統（エルロン、エレベーター、ラダー、スロットル）の実装
- [x] HUD（ヘッドアップディスプレイ）の設計と実装
- [x] YSFLIGHTと同様のキーアサイン実装
- [ ] マウス位置による仮想ジョイスティック入力の改善
- [ ] コックピット表示の充実（計器類の実装）
- [ ] メニュー画面と設定画面の実装
- [ ] チュートリアルの作成

### バックエンド (Deno)
- [x] Denoサーバーの初期設定
- [x] 静的ファイル配信の実装
- [ ] APIエンドポイントの設計
- [x] エラーハンドリングとロギング
- [ ] パフォーマンス最適化

### リアルタイム通信 (Socket.io)
- [ ] Socket.io接続の基本設定
- [ ] クライアント・サーバー間通信プロトコルの設計
- [ ] 状態同期メカニズムの実装
- [ ] 接続エラー処理とリカバリー
- [ ] レイテンシー最適化

## 既知の課題と対応策

### 技術的課題
1. **404エラー**: ブラウザコンソールに404エラーが表示される(favicon.icoだけかも？)
   - 対応策: リソースパスの確認と修正が必要

2. **高度な航空力学効果の欠如**: 失速時の挙動など、より複雑な航空力学効果が未実装
   - 対応策: YSFLIGHTのfsairplaneproperty.cppを参考に実装予定
   - 進捗: 失速時の挙動改善を実装済み（2025/03/10）

3. **コードの疎結合化**: 一部のコンポーネント間の結合度が高い
   - 対応策: インターフェースを活用したリファクタリングを計画中

4. **TypeScriptの型エラー**: Three.jsのモジュールが見つからないエラーが表示される
   - 対応策: deno.jsonにThree.jsのESMインポートを追加（2025/03/10）

5. **YSFLIGHTモデルの統合**: YSFLIGHTの3Dモデルファイル（.dnm, .srf）を直接読み込む機能が未実装
   - 対応策: YSFLIGHTのモデルローダーを参考に、Three.js用のカスタムローダーを実装する
   - 進捗: SRFLoaderの基本実装完了（2025/03/10）

6. **C++からTypeScriptへの移植**: YSFLIGHTのC++コードをTypeScriptに移植する際の課題
   - 対応策: 同等の機能を実現するTypeScriptの実装パターンを検討し、必要に応じてWebAssemblyの活用も検討

## テスト計画（優先順位順）

1. **物理計算モジュールの単体テスト**
   - Aircraft.tsの各メソッドのテスト
   - 大気モデル計算のテスト
   - エンジンモデル計算のテスト

2. **統合テスト**
   - フロントエンドとバックエンドの連携テスト
   - ユーザー入力から物理計算までの一連のフローテスト

3. **パフォーマンステスト**
   - フレームレート測定
   - メモリ使用量の監視
   - CPU負荷の測定

4. **クロスブラウザテスト**
   - Chrome, Firefox, Safari, Edgeでの動作確認

5. **ユーザビリティテスト**
   - 操作性の評価
   - UI/UXの改善点の特定

6. **YSFLIGHT互換性テスト**
   - 本家YSFLIGHTとの挙動比較
   - 同一条件下での飛行特性の検証

## 開発ロードマップ

### 短期目標（1-3ヶ月）
1. **航空機モデルの強化**
   - YSFLIGHTのモデルファイル（.dnm, .srf）の読み込み機能の実装
   - 失速時の挙動改善
   - フラップ、スポイラー、可変翼などの制御面の追加
   - 風の影響のシミュレーション

2. **UI/UXの改善**
   - コックピット表示の充実
   - 計器類の実装（高度計、速度計、姿勢指示器など）
   - メニュー画面と設定画面の実装

3. **テスト基盤の構築**
   - 単体テストフレームワークの導入
   - 重要なモジュールのテスト実装

### 中期目標（3-6ヶ月）
1. **自動操縦システムの実装**
   - 高度維持
   - 方向維持
   - 簡易な着陸アプローチ

2. **マルチプレイヤー基盤の構築**
   - Socket.io接続の基本設定
   - クライアント・サーバー間通信プロトコルの設計
   - 状態同期メカニズムの実装

### 長期目標（6ヶ月以上）
1. **高度なマルチプレイヤー機能**
   - 編隊飛行
   - 空戦シミュレーション

2. **環境の拡張**
   - 詳細な地形と景観
   - 天候システム（雨、雪、霧など）

## 技術的負債と最適化の機会

### 技術的負債
1. **コード構造**: 一部のコンポーネントが密結合しており、将来的な拡張性に影響する可能性
2. **エラーハンドリング**: 包括的なエラーハンドリング戦略の欠如
3. **ドキュメント**: コード内ドキュメントの不足
4. **テスト**: テスト自動化の欠如

### 最適化の機会
1. **パフォーマンス**:
   - 物理計算の最適化（WebAssemblyの活用検討）
   - レンダリングパイプラインの効率化

2. **コード品質**:
   - ESLintとPrettierの導入
   - コード規約の厳格化

3. **アーキテクチャ**:
   - モジュール間の明確な境界設定
   - 依存性注入パターンの活用

## 確認済み機能と実装状況

1. **大気モデル**
   - ✅ 高度に基づく大気密度計算 → `getAirDensity()` として実装済み
   - ✅ 高度に基づくマッハ1の速度計算 → `getMachOne()` として実装済み

2. **エンジン特性**
   - ✅ エンジンブレーキトルク → Aircraft.ts の `updateEngineRPM()` に実装済み
   - ✅ スロットルとRPMの関連付け → Aircraft.ts に実装済み
   - ✅ プロペラの詳細モデル → Aircraft.ts に `calculateBladeForcesAndTorque()`, `controlPropellerPitch()` として実装済み

3. **航空力学**
   - ✅ 揚力・抗力計算モデル
   - ✅ 舵面効果（エルロン、エレベータ、ラダー）
   - ✅ 地面衝突と摩擦
   - ✅ 揚力方向の計算改善（速度ベクトルに垂直な方向）
   - ✅ 失速時の挙動改善（迎え角に応じた揚力の非線形挙動）

4. **航空機特性**
   - ✅ 基本的な状態管理（位置、姿勢、速度など）
   - ✅ F-18風の機体モデルの実装
   - ⚠️ 未対応: 詳細な航空機特性（離着陸装置、フラップ、スポイラーなど）
   - ⚠️ 未対応: 気象の影響（風、乱気流など）
   - ⚠️ 未対応: 自動操縦システム

5. **モデルローダー**
   - ✅ SRFファイルローダーの基本実装
   - ✅ DNMファイルローダーの基本実装
   - ⚠️ 未対応: テクスチャの完全対応
   - ⚠️ 未対応: アニメーションの完全対応

## 操作方法

- **カメラ**:
  - F1: コックピットビュー
  - F2: 外部視点
  - F3: 追跡視点
  - F4: タワー視点
  - M: マウスジョイスティックモード切替
- **航空機**:
  - ↑/↓キー: エレベータ（ピッチ制御）
  - ←/→キー: エルロン（ロール制御）
  - Z/X/C: ラダー制御（左/中央/右）
  - Q/A: スロットル増加/減少
  - Tab: アフターバーナー（将来実装）
  - G: 着陸装置（将来実装）
  - B: スポイラー/ブレーキ（将来実装）
- **武器**:
  - スペースキー: 武器発射（将来実装）
- **シミュレーション**:
  - スペースキー: デモモード中はシミュレーション開始

## 現状の文脈 (2025/03/10)

### 最近の進捗・改善点
- **プロペラエンジンモデルの実装完了**
  - YSFLIGHTのfsrealprop.cppを参考に詳細なプロペラブレードモデルを実装
  - 個々のブレードの揚力・抗力を計算し、正確な推力とトルクを生成
  - 可変ピッチプロペラとガバナー機構（自動ピッチ調整）の実装
  - エネルギーベースのエンジン出力計算システム

- **TypeScriptへの完全移行**
  - src/physics/types.ts, public/scripts/main.ts, src/physics/Aircraft.tsのTypeScript化
  - 旧JSファイルは削除
  - ビルドプロセスで.tsファイルから.jsファイルを生成する設計

- **ドキュメント強化**
  - docs/flight_physics.mdに飛行物理モデルの解説を追加
  - docs/propeller_engine.mdにプロペラエンジンモデルの詳細ドキュメントを作成
  - docs/model_loaders.mdにYSFLIGHTモデルローダーの解説を追加
  - docs/stall_behavior.mdに失速時の挙動改善の解説を追加

- **物理モデルの改善**
  - 揚力方向の計算を改善し、より正確な飛行挙動を実現
  - 初期高度と速度を調整し、飛行開始時の安定性を向上
  - 失速時の挙動を改善し、より現実的な飛行特性を実現

- **F-18風の機体モデルの実装**
  - Three.jsの基本ジオメトリを組み合わせてF-18風の機体モデルを作成
  - コックピット、主翼、尾翼、エンジンノズルなどの詳細を追加

- **YSFLIGHTモデルローダーの実装**
  - SRFファイルローダーの基本実装
  - DNMファイルローダーの基本実装
  - モデルローダーの解説ドキュメント作成

### 次のタスク担当者への引き継ぎ事項

1. **YSFLIGHTモデルの統合**
   - YSFLIGHT/runtime/aircraft/ ディレクトリには多数の機体モデルファイル（.dnm, .srf, .dat）が存在
   - SRFLoaderとDNMLoaderの基本実装は完了したが、テクスチャとアニメーションの完全対応が必要
   - 特にf18.dnm, f18cockpit.srf, f18coll.srfなどのファイルを優先的に対応すべき
   - YSFLIGHTのソースコードからモデルファイルの読み込み部分を参考にすること
   - **重要**: YSFLIGHTのモデルをそのまま使用することを最優先とし、独自モデルの作成は避ける

2. **キーアサインの完全対応**
   - 現在のキーアサインはYSFLIGHTに近づけたが、まだ完全ではない
   - マウス位置による仮想ジョイスティック入力の改善が必要
   - YSFLIGHTのキー設定ファイルを参考に、完全な互換性を目指すこと
   - YSFLIGHT/runtime/config/ ディレクトリのキー設定ファイルを徹底的に調査すること

3. **物理モデルのさらなる改善**
   - 失速時の挙動改善は実装済みだが、さらなる調整が必要
   - フラップ、スポイラー、可変翼などの制御面の追加が必要
   - 風の影響のシミュレーションが未実装
   - YSFLIGHTの物理パラメータを可能な限り同一の値で実装すること

4. **TypeScriptの型エラー解決**
   - Three.jsの型定義ファイルが見つからないエラーが表示される問題は、deno.jsonの更新で対応
   - 今後も型エラーが発生した場合は、deno.jsonのimportsセクションを確認・更新すること

5. **404エラーの修正**
   - ブラウザコンソールに404エラーが表示される問題の解決
   - リソースパスの確認と修正が必要

6. **Deno環境の最適化**
   - 本プロジェクトはDenoを使用しているため、Node.js/npm関連のファイル（package.json等）は不要
   - Three.jsなどの外部ライブラリはdeno.jsonのimportsセクションで管理
   - ビルドプロセスはDenoのタスクで実行

### 注意点
- **徹底的なリソース活用**: YSFLIGHTのソースコードやリソースは「参考にする」だけでなく、可能な限り直接活用すること
- **パラメータの同一性**: 物理モデルのパラメータ、航空機特性、エンジン特性などは、YSFLIGHTと同一の値を使用すること
- **座標系の違い**: Three.jsとYSFLIGHTの座標系の違いに注意（YSFLIGHTはY-upだが、Three.jsはY-upまたはZ-upの設定が可能）
- **テスト重視**: 大規模な変更を行う前に、現在の機能が正常に動作することを確認すること
- **ブラウザ制約への対応**: WebブラウザとC++実装の違いによる制約は、同等の挙動を実現する代替手段で対応すること
- **Deno環境の活用**: DenoのESMインポート機能を活用し、外部ライブラリの管理を簡素化すること

### 今後の方向性
1. **忠実な再現を最優先**: YSFLIGHTのモデル、パラメータ、挙動を忠実に再現することを最優先とする
2. **リソースの直接活用**: YSFLIGHTのモデルファイル、テクスチャ、設定ファイルなどを直接読み込む機能を実装する
3. **ユーザー体験の向上**: 操作性、視覚的フィードバック、HUDなどのUI要素を改善する
4. **マルチプレイヤー機能**: 本家YSFLIGHTと同様のマルチプレイヤー機能を実装する
5. **テスト基盤の整備**: 自動テストを導入し、本家YSFLIGHTとの挙動の一致を検証する
