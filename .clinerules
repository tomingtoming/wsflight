# wsflight 開発計画 (v1.0)

YSFLIGHTのようなフライトシミュレーターをWebブラウザ上で再現するプロジェクトです。
このプロジェクトは、Three.jsを使用して3Dグラフィックスを描画し、
DenoとSocket.ioを使用してリアルタイム通信を実現します。
参考にするためのYSFLIGHTのソースコードはリポジトリルートの /YSFLIGHT/ に格納されています。

YSFLIGHTのソースコードから得た知見は常にリポジトリの /docs/ にドキュメントとして保存し、
プロジェクトの進捗状況や開発計画はこの .clinerules に記載します。

## コーディング規約

- TypeScriptを使用し、Three.jsとDenoの基本的な連携を優先する
- コードの品質を保つため、ESLintとPrettierを使用する
- インターフェースを活用し、疎結合な設計を心がける
- 物理計算などの重要な機能は必ずユニットテストを作成する

## プレスリリースドリブン開発アプローチ

プレスリリースドリブン開発は、製品の完成形を先に明確化してからバックワードに開発を進める手法です。
wsflight v1.0のREADMEに基づき、以下の開発計画を実施します。

## 機能実装チェックリスト

### 3Dレンダリングとグラフィックス (Three.js)
- [x] Three.jsの基本セットアップ
- [x] カメラとライティングの設定
- [x] 基本的な地形の実装
- [x] 1機の航空機モデルの設計と実装
- [ ] 飛行機のテクスチャと詳細設計
- [ ] 天候システム（晴れ/曇り）の実装

### 物理エンジンと飛行ダイナミクス
- [x] 飛行物理モデルの実装
- [x] 重力と空気抵抗のシミュレーション
- [x] エンジン出力と推力の計算
- [x] 舵の効きと航空力学の実装
- [x] 衝突判定システムの実装（地面のみ）

### ユーザーインターフェースと操作
- [x] キーボード入力ハンドリングの実装
- [x] 操縦系統（エルロン、エレベーター、ラダー、スロットル）の実装
- [x] HUD（ヘッドアップディスプレイ）の設計と実装
- [ ] メニュー画面と設定画面の実装
- [ ] チュートリアルの作成

### バックエンド (Deno)
- [x] Denoサーバーの初期設定
- [x] 静的ファイル配信の実装
- [ ] APIエンドポイントの設計
- [x] エラーハンドリングとロギング
- [ ] パフォーマンス最適化

### リアルタイム通信 (Socket.io)
- [ ] Socket.io接続の基本設定
- [ ] クライアント・サーバー間通信プロトコルの設計
- [ ] 状態同期メカニズムの実装
- [ ] 接続エラー処理とリカバリー
- [ ] レイテンシー最適化

## テスト計画
- [ ] 単体テストの作成（各コンポーネント）
- [ ] 統合テストの実施（システム全体）
- [ ] パフォーマンステスト（フレームレート、レスポンス）
- [ ] クロスブラウザテスト（Chrome, Firefox, Safari, Edge）
- [ ] ユーザビリティテスト

## ドキュメント作成
- [x] コード内コメントとドキュメンテーション
- [ ] APIドキュメント
- [ ] ユーザーマニュアル
- [ ] 開発者向けガイド

## デプロイと公開準備
- [x] ビルドプロセスの最適化
- [ ] アセット圧縮と最適化
- [ ] サーバーデプロイ手順書の作成
- [ ] リリースノートの作成
- [ ] GitHub Pagesへのデモデプロイ

## 現状の文脈 (2025/03/09)

### 進捗・改善点
- JavaScriptからTypeScriptへの移行完了
  - src/physics/types.ts, public/scripts/main.ts, src/physics/Aircraft.tsのTypeScript化
  - 旧JSファイルは削除
  - ビルドプロセスで.tsファイルから.jsファイルを生成する設計

- 飛行物理モデルの強化
  - YSFLIGHTのソースコードを参考に大気モデルを実装
  - エンジンモデル（スロットル、RPM、推力の関係）を強化
  - 舵面効果（エルロン、エレベータ、ラダー）の実装
  - 地面との衝突判定と摩擦の実装

- HUDの改善
  - 速度表示（km/h）
  - 高度表示（m）
  - エンジンRPM表示

- ビルドシステムの強化
  - scripts/build.ts を復元・改良
  - Three.jsを外部モジュールとして扱うように設定
  - ビルド成果物（*.js.map, *.js）を.gitignoreに追加

- ドキュメント作成
  - docs/flight_physics.mdに飛行物理モデルの解説を追加

### 操作方法
- カメラ: マウスドラッグでカメラ操作（Three.jsのOrbitControls）
- 航空機:
  - ↑/↓キー: エレベータ（ピッチ制御）
  - ←/→キー: エルロン（ロール制御）
  - A/Dキー: ラダー（ヨー制御）
  - Wキー: スロットル最大
  - Sキー: スロットル最小

### 開発環境
- ビルド: `deno task build`
- 開発サーバー起動: `deno task dev`
- サーバーURL: http://localhost:8000
