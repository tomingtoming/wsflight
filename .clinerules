# wsflight

## Overview
- Source: Existing C++ flight simulator in `/YSFLIGHT/` directory.
- Target: Web-based flight simulator using TypeScript, deno, three.js (and possibly other libs).
- Code, comments, commit message, and documentation in English; user conversation in Japanese.
- Static files copied as is from `/YSFLIGHT/` directory.
- Keyboard and mouse usage replicated (with adjustments for keys that aren't suitable in a browser, e.g. TAB).
- Tests written per fix; commit upon all tests passing.

## Implementation Steps (Tickets for Tasks)

1. **Product Analysis**
   - Analyze documentation (`readme.md`), code in `/YSFLIGHT/src/`, and resource files (`bitmap/`, `runtime/`, etc.).
   - Document product architecture including graphics, physics simulation, GUI, autopilot, input handling.
   - Output documented in Markdown file under `/docs/ticket/`.

2. **Component Extraction and Task Breakdown**
   - Identify core modules: `src/graphics`, `src/dynamics`, `src/gui`, `src/autopilot`, etc.
   - Define migration rules - how to translate C++ code to TypeScript.
   - Create separate ticket for each module with detailed steps, implementation guidelines, and testing requirements.

3. **Static Resource Organization and Copy**
   - Organize image, runtime, and other resource files for use in web context.
   - Copy necessary files directly from `/YSFLIGHT/` to appropriate location.

4. **Keyboard and Mouse Input Mimicry**
   - Recreate input behavior in a web browser.
   - Provide remapping for keys like TAB (or others unsuitable in a browser).
   - Develop and test input event handling.

5. **Testing Strategy and Commit Protocol**
   - Implement tests for each component using Deno or other frameworks.
   - Define a commit strategy: commit after successful test passage.
   - Write documentation for tests and commit guidelines.

6. **Developer-oriented System Prompt**
   - Provide an English system prompt for the AI engineers outlining migration guidelines, translation strategies, three.js usage, and testing procedure.
   - Append detailed prompt in `.clinerules` file; full details in `/docs/ticket/`.

## Overall Process Flow

```mermaid
flowchart TD
    A[Product Analysis]
    B[Component Breakdown]
    C[Resource Organization]
    D[Input Handling Re-creation]
    E[Testing and Commit Strategy]
    F[Developer System Prompt]

    A --> B
    B --> C
    B --> D
    C --> E
    D --> E
    E --> F
```

## Next Steps
- Begin detailed documentation for each task.
- Ensure testing is integrated per feature.
- Align migration rules with product functionality.

## Development Best Practices (Learned from Implementation)

### Testing and Browser APIs
- Implement test mode flags in components that use browser APIs (requestAnimationFrame, setTimeout, etc.)
- Create explicit cleanup methods for all timers and animation frames to prevent memory leaks
- Use dependency injection or singleton patterns with test-friendly interfaces
- Provide direct update methods (e.g., updateStep) that bypass animation frames for deterministic testing

### Deno Configuration
- Configure deno.json properly with:
  ```json
  {
    "lint": {
      "rules": {
        "exclude": ["no-explicit-any"],
        "include": ["recommended"]
      },
      "include": ["src/"]
    },
    "fmt": {
      "include": ["src/"],
      "options": {
        "lineWidth": 80,
        "indentWidth": 2,
        "singleQuote": false
      }
    },
    "compilerOptions": {
      "lib": ["deno.ns", "dom", "dom.iterable", "dom.asynciterable"]
    },
    "imports": {
      "three": "npm:three@0.160.0",
      "three/examples/": "npm:/three@0.160.0/examples/"
    }
  }
  ```
- Install npm packages with `deno add npm:package-name@version`
- Use proper import paths for npm packages (e.g., "three" instead of relative paths)

### Code Quality
- Remove async keyword from functions that don't use await
- Use const instead of let for variables that aren't reassigned
- Prefix unused parameters with underscore (e.g., _id) to avoid linter warnings
- Run linter and type checks before committing: `deno lint && deno check src/main.ts`
- Run tests with proper permissions: `deno test --allow-read --allow-env`

### Collaboration and Communication
- Clearly document technical decisions and their rationale for other team members
- Provide detailed explanations when requesting code reviews
- When fixing bugs, explain both the symptom and the root cause
- Update documentation immediately when learning new patterns or solutions
- Share knowledge about browser-specific behaviors and workarounds
- Maintain regular communication with the architecture team about implementation challenges
- Document edge cases and testing strategies for complex browser interactions

### Project Management
- Verify CI passes locally before committing changes
- Break down complex tasks into smaller, testable units
- Address technical debt immediately rather than postponing
- Keep track of browser API limitations and their workarounds
- Maintain a list of known issues and their status
- Document performance considerations for browser-based implementations
- Create explicit test cases for browser-specific behaviors
